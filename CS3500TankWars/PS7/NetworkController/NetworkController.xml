<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkController</name>
    </assembly>
    <members>
        <member name="T:NetworkUtil.Networking">
            <summary>
            a general purpose asynchronous networking library that supports any text-based communication. 
            this library is essentially an easy to use wrapper over the C# networking API.
            it will be used to implement the upcoming game client and server (PS8 and PS9).
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.StartServer(System.Action{SocketState},System.Int32)">
            <summary>
            Starts a TcpListener on the specified port and starts an event-loop to accept new clients.
            The event-loop is started with BeginAcceptSocket and uses AcceptNewClient as the callback.
            AcceptNewClient will continue the event-loop.
            </summary>
            <param name="toCall">The method to call when a new connection is made</param>
            <param name="port">The port to listen on</param>
        </member>
        <member name="M:NetworkUtil.Networking.AcceptNewClient(System.IAsyncResult)">
             <summary>
             To be used as the callback for accepting a new client that was initiated by StartServer, and 
             continues an event-loop to accept additional clients.
            
             Uses EndAcceptSocket to finalize the connection and create a new SocketState. The SocketState's
             OnNetworkAction should be set to the delegate that was passed to StartServer.
             
             Then invokes the OnNetworkAction delegate with the new SocketState so the user can take action. 
             
             If anything goes wrong during the connection process (such as the server being stopped externally), 
             the OnNetworkAction delegate should be invoked with a new SocketState with its ErrorOccured flag set to true 
             and an appropriate message placed in its ErrorMessage field. The event-loop should not continue if
             an error occurs.
            
             If an error does not occur, after invoking OnNetworkAction with the new SocketState, an event-loop to accept 
             new clients should be continued by calling BeginAcceptSocket again with this method as the callback.
             </summary>
             <param name="ar">The object asynchronously passed via BeginAcceptSocket. It must contain a tuple with 
             1) a delegate so the user can take action (a SocketState Action), and 2) the TcpListener</param>
        </member>
        <member name="M:NetworkUtil.Networking.TryEndAcceptSocket(System.IAsyncResult,System.Net.Sockets.TcpListener,System.Action{SocketState})">
            <summary>
            Helper method that attempts to create a new SocketState given the results from EndAcceptSocket.
            If successful will invoke the OnNetworkAction of the created SocketState and continue AcceptSocket loop.
            Will HandleError if anything goes wrong during connection process.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.StopServer(System.Net.Sockets.TcpListener)">
            <summary>
            Stops the given TcpListener.
            note from the msdn docs: 
            The Stop method does not close any accepted connections. You are responsible for closing these separately.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.ConnectToServer(System.Action{SocketState},System.String,System.Int32)">
             <summary>
             Begins the asynchronous process of connecting to a server via BeginConnect, 
             and using ConnectedCallback as the method to finalize the connection once it's made.
             
             If anything goes wrong during the connection process, toCall should be invoked 
             with a new SocketState with its ErrorOccured flag set to true and an appropriate message 
             placed in its ErrorMessage field. Between this method and ConnectedCallback, toCall should 
             only be invoked once on error.
            
             This connection process should timeout and produce an error (as discussed above) 
             if a connection can't be established within 3 seconds of starting BeginConnect.
             
             </summary>
             <param name="toCall">The action to take once the connection is open or an error occurs</param>
             <param name="hostName">The server to connect to</param>
             <param name="port">The port on which the server is listening</param>
        </member>
        <member name="M:NetworkUtil.Networking.TryGetIPAddress(System.String,System.Net.IPHostEntry@,System.Net.IPAddress@)">
            <summary>
            Helper method to determine and verify the given IPAddress information before we can make a connection.
            if any of the steps fail, then we indicate an error to the user in the same way as usual 
            and cancel the connection process.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.TryBeginConnect(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32,System.AsyncCallback,SocketState)">
            <summary>
            Helper method that attempts to BeginConnect and then will wait 3 seconds or timeout.
            If there is a timeout then will CloseSocket which triggers the ConnectedCallback once 
            which in turn will tigger TryEndConnect and eventually cause HandleError to be called.
            If there is a failure in the BeginConnect call will HandleError.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.ConnectedCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a connection process that was initiated by ConnectToServer.
            
             Uses EndConnect to finalize the connection.
             
             As stated in the ConnectToServer documentation, if an error occurs during the connection process,
             either this method or ConnectToServer (not both) should indicate the error appropriately.
             
             If a connection is successfully established, invokes the toCall Action that was provided to ConnectToServer (above)
             with a new SocketState representing the new connection.
             
             </summary>
             <param name="ar">The object asynchronously passed via BeginConnect</param>
        </member>
        <member name="M:NetworkUtil.Networking.TryEndConnect(System.IAsyncResult,SocketState)">
            <summary>
            Helper method that will attempt to EndConnect and then invoke OnNetworkAction on the socket.
            If there is any failure of EndConnect will HandleError.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.GetData(SocketState)">
            <summary>
            Begins the asynchronous process of receiving data via BeginReceive, using ReceiveCallback 
            as the callback to finalize the receive and store data once it has arrived.
            The object passed to ReceiveCallback via the AsyncResult should be the SocketState.
            
            If anything goes wrong during the receive process, the SocketState's ErrorOccured flag should 
            be set to true, and an appropriate message placed in ErrorMessage, then the SocketState's
            OnNetworkAction should be invoked. Between this method and ReceiveCallback, OnNetworkAction should only be 
            invoked once on error.
            
            </summary>
            <param name="socketState">The SocketState to begin receiving</param>
        </member>
        <member name="M:NetworkUtil.Networking.TryGetData(SocketState)">
            <summary>
            Helper method that attempts to BeginReceive.
            If the socket's BeginReceive operation fails, will HandleError.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.ReceiveCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a receive operation that was initiated by GetData.
             
             Uses EndReceive to finalize the receive.
            
             As stated in the GetData documentation, if an error occurs during the receive process,
             either this method or GetData (not both) should indicate the error appropriately.
             
             If data is successfully received:
              (1) Read the characters as UTF8 and put them in the SocketState's unprocessed data buffer (its string builder).
                  This must be done in a thread-safe manner with respect to the SocketState methods that access or modify its 
                  string builder.
              (2) Call the saved delegate (OnNetworkAction) allowing the user to deal with this data.
             </summary>
             <param name="ar"> 
             This contains the SocketState that is stored with the callback when the initial BeginReceive is called.
             </param>
        </member>
        <member name="M:NetworkUtil.Networking.Send(System.Net.Sockets.Socket,System.String)">
            <summary>
            Begin the asynchronous process of sending data via BeginSend, using SendCallback to finalize the send process.
            
            If the socket is closed, does not attempt to send.
            
            If a send fails for any reason, this method ensures that the Socket is closed before returning.
            </summary>
            <param name="socket">The socket on which to send the data</param>
            <param name="data">The string to send</param>
            <returns>True if the send process was started, false if an error occurs or the socket is already closed</returns>
        </member>
        <member name="M:NetworkUtil.Networking.TryBeginSend(System.Net.Sockets.Socket,System.String,System.AsyncCallback)">
            <summary>
            Helper method that will attempt to BeginSend given data.
            If BeginSend call fails will make sure the socket is closed.
            </summary>
            <returns>If the BeginSend was successful</returns>
        </member>
        <member name="M:NetworkUtil.Networking.SendCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a send operation that was initiated by Send.
            
             Uses EndSend to finalize the send.
             
             This method must not throw, even if an error occured during the Send operation.
             </summary>
             <param name="ar">
             This is the Socket (not SocketState) that is stored with the callback when
             the initial BeginSend is called.
             </param>
        </member>
        <member name="M:NetworkUtil.Networking.TryEndSend(System.IAsyncResult,System.Net.Sockets.Socket)">
            <summary>
            Helper method that attempts to EndSend.
            If EndSend fails does not throw and exception.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.SendAndClose(System.Net.Sockets.Socket,System.String)">
            <summary>
            Begin the asynchronous process of sending data via BeginSend, using SendAndCloseCallback to finalize the send process.
            This variant closes the socket in the callback once complete. This is useful for HTTP servers.
            
            If the socket is closed, does not attempt to send.
            
            If a send fails for any reason, this method ensures that the Socket is closed before returning.
            </summary>
            <param name="socket">The socket on which to send the data</param>
            <param name="data">The string to send</param>
            <returns>True if the send process was started, false if an error occurs or the socket is already closed</returns>
        </member>
        <member name="M:NetworkUtil.Networking.SendAndCloseCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a send operation that was initiated by SendAndClose.
            
             Uses EndSend to finalize the send, then closes the socket.
             
             This method must not throw, even if an error occured during the Send operation.
             
             This method ensures that the socket is closed before returning.
             </summary>
             <param name="ar">
             This is the Socket (not SocketState) that is stored with the callback when
             the initial BeginSend is called.
             </param>
        </member>
        <member name="T:NetworkUtil.NetworkingException">
            <summary>
            custom exception to be caught and thrown within the Networking code.
            this exception class is public so that the future game client and server can utilize it if they want to.
            </summary>
        </member>
        <member name="T:NetworkUtil.NetworkingHelper">
            <summary>
            helper methods for the Networking class. 
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.CreateNewErrorSocketState(System.Action{SocketState})">
            <summary>
            create a new socket state with the toCall delegate and the ErrorOccurred flag to true.
            this method is only used when a socket state doesn't exist yet.
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.SetSocketStateError(SocketState,System.String)">
            <summary>
            set the socket state's ErrorOccurred flag to true and set the ErrorMessage to the given error message.
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.WaitForResultOrTimeout(System.IAsyncResult,System.Int32)">
            <summary>
            waits for the given async operation to complete. if it takes longer than the given timeout value,
            it will return false. 
            this method is mainly used for socket.BeginSend.
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.CreateNewSocket(System.Net.IPAddress)">
            <summary>
            create a new TCP/IP socket object using the given IPAddress, 
            stream socket type, TCP protocol type, and with no delay.
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.HandleError(SocketState,System.Exception)">
            <summary>
            indicate an error to the user by invoking the OnNetworkAction delegate with an error socket state.
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.CloseSocketIfConnected(System.Net.Sockets.Socket)">
            <summary>
            shutdown and close the socket.
            
            if the socket is not connected, then the socket has already been closed, 
            so we shouldn't call close again because it will throw an object disposed exception.
            </summary>
        </member>
        <member name="M:NetworkUtil.NetworkingHelper.CloseSocket(System.Net.Sockets.Socket)">
            <summary>
            NOTE: this method should only be directly invoked if the initial connection process fails!
            
            if the call to BeginSend times out, then we need to close the socket. however, 
            the socket's Connected property is still false, so we need to go ahead and call Close anyway,
            because we know that the socket has not been disposed yet. in all other cases, the socket 
            is probably already disposed if Connected is false, that's why we use CloseSocketIfConnected.
            </summary>
        </member>
        <member name="T:SocketState">
            <summary>
            A SocketState is a class for representing one network connection 
            and all its related state
            </summary>
        </member>
        <member name="P:SocketState.ErrorMessage">
            <summary>
            A message indicating the nature of an error, if one occured
            </summary>
        </member>
        <member name="P:SocketState.ErrorOccured">
            <summary>
            If an error occurs during a network operation, this flag must
            be set to true before invoking the user's OnNetworkAction delegate.
            The user of the SocketState should check this flag in their
            OnNetworkAction delegates.
            </summary>
        </member>
        <member name="F:SocketState.ID">
            <summary>
            An identifier associated with the connection
            </summary>
        </member>
        <member name="F:SocketState.OnNetworkAction">
            <summary>
            Function to call when data is received or when a connection is made.
            The OnNetworkAction function allows the same network code to be utilized
            by a chain of handling methods. For example, there may be a main
            gameplay data handling routine, but you may want to have a different
            initial handshake routine. By swapping out this function, you
            don't have to change the network code
            </summary>
        </member>
        <member name="M:SocketState.#ctor(System.Action{SocketState},System.Net.Sockets.Socket)">
            <summary>
            Simple constructor
            </summary>
            <param name="toCall">The action to take when network activity occurs</param>
            <param name="s">The socket</param>
        </member>
        <member name="M:SocketState.GetData">
            <summary>
            Returns the unprocessed data the SocketState has received so far, in a thread-safe manner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocketState.RemoveData(System.Int32,System.Int32)">
            <summary>
            Removes data from the SocketState's unprocessed data buffer in a thread-safe manner.
            Call this after processing data in your OnNetworkAction methods.
            </summary>
            <param name="start">The index of the first character to remove</param>
            <param name="length">The length of the string to remove, starting at "start"</param>
        </member>
        <member name="M:SocketState.ClearData">
            <summary>
            Removes all data from the SocketState's unprocessed data buffer in a thread-safe manner.
            </summary>
        </member>
    </members>
</doc>
