<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown,
                  and no change is made to the spreadsheet.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a list consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            The contents of the named cell becomes number.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            The contents of the named cell becomes text.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException, and no change is made to the spreadsheet.
            
            Otherwise, the contents of the named cell becomes formula. The method returns a
            list consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            Returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="T:SS.Spreadsheet">
            <summary>
            Implementation of AbstractSpreadsheet
            
            A Spreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Creates an empty Spreadsheet with an infinite number of cells
            (empty means no content in cells) 
            This constructor has no extra IsValid constraints and Normalize maps to itself
            The version is "default"
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Creates an empty Spreadsheet with an infinite number of cells
            (empty means no content in cells) 
            This constructor takes in an IsValid constraint and a way to Normalize cell names
            it also takes in a version for the spreadsheet
            </summary>
            <param name="isValid">Imposes constrains on what a valid variable name is beyond Spreadsheet's definition</param>
            <param name="normalize">Normalizes cell names in a particular way</param>
            <param name="version">The version of the spreadsheet</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Creates a Spreadsheet from a given Spreadsheet xml file
            This constructor takes in an IsValid constraint and a way to Normalize cell names
            it also takes in a version for the spreadsheet
            </summary>
            <param name="filepath">Filepath of the Spreadsheet to be read in</param>
            <param name="isValid">Imposes constrains on what a valid variable name is beyond Spreadsheet's definition</param>
            <param name="normalize">Normalizes cell names in a particular way</param>
            <param name="version">The version of the spreadsheet</param>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
            <param name="name">cell name</param>
            <returns>content that is either a string, a double, or a Formula</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            The contents of the named cell becomes number.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            The contents of the named cell becomes text.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException, and no change is made to the spreadsheet.
            
            Otherwise, the contents of the named cell becomes formula. The method returns a
            list consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            Returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown,
                  and no change is made to the spreadsheet.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a list consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.UpdateCellValues(System.Collections.Generic.IList{System.String})">
            <summary>
            This helper method will update the values of all the cells given in the order given
            </summary>
            <param name="cellsToRecalculate">A list of cells to recalculate in order</param>
        </member>
        <member name="M:SS.Spreadsheet.IsValidCellName(System.String)">
            <summary>
            This helper method determines if a name is a valid cell name as defined by AbstractSpreadsheet: 
            A string is a valid cell name if and only if:
              (1) The string starts with one or more letters and is followed by one or more numbers.
              (2) The (application programmer's) IsValid function returns true for that string, and should be called only for variable strings that are valid first by (1) above.
            This method determines if the name of the cell is valid.
            </summary>
            <param name="name">name of cell</param>
            <returns>if the name of the cell is valid</returns>
        </member>
        <member name="M:SS.Spreadsheet.CheckCellNameAndNull(System.String)">
            <summary>
            This helper method determines if a name is null or if a name is a valid cell name as defined by AbstractSpreadsheet: 
            A string is a valid cell name if and only if:
              (1) The string starts with one or more letters and is followed by one or more numbers.
              (2) The (application programmer's) IsValid function returns true for that string, and should be called only for variable strings that are valid first by (1) above.
              
            This method will ether throw an InvalidNameException if cell name is either invalid or null otherwise do nothing.
            
            </summary>
            <param name="name">name of cell</param>
        </member>
        <member name="M:SS.Spreadsheet.AddToCellsWithContent(System.String,System.Object)">
            <summary>
            This helper method will add a cell to cellsWithContent
            If cell already has content will replace with new content, 
            If cell does not have content then will add new content
            </summary>
            <param name="name">name of cell</param>
            <param name="content">double, string, or Formula content for the cell</param>
        </member>
        <member name="M:SS.Spreadsheet.GetCell(System.String)">
            <summary>
            Helper method that will attempt to lookup a cell value and either return a Cell object for cells that have content and value 
            or return an empty string "" for cells with no content or value      
            If name is null or invalid, throws an InvalidNameException.
            </summary>
            <param name="name">Cell name</param>
            <returns>Cell object or string</returns>
        </member>
        <member name="M:SS.Spreadsheet.CellLookup(System.String)">
            <summary>
            Look up function for determining the value of a cell
            Will either reutrn a double if the current cell value is a double
            Otherwise it will throw an ArgumentException
            </summary>
            <param name="name">cell name</param>
            <returns>value of cell</returns>
        </member>
        <member name="M:SS.Spreadsheet.DetermineCellContentToWrite(SS.Spreadsheet.Cell)">
            <summary>
            Helper method that will determine the string representation of cell content
            If the cell contains a string, will return it.  
            If the cell contains a double d, d.ToString() will be returned.  
            If the cell contains a Formula f, f.ToString() with "=" prepended will be returned.
            </summary>
            <param name="value">Cell to determine string representation of content</param>
            <returns>string representation of content</returns>
        </member>
        <member name="M:SS.Spreadsheet.CreateSpreadsheetFromFilepath(System.String)">
            <summary>
            Helper method that will attempt to read a given XML spreadsheet file
            and construct a spreadsheet from it using SetContentsOfCell
            </summary>
            <param name="filepath">filepath for XML spreadsheet to read</param>
        </member>
        <member name="T:SS.Spreadsheet.Cell">
            <summary>
            A Cell holds CellContent and CellValue with get and set access.  
            For this spreadsheet a Cell will always have a double, string, or Formula for its content
            and a string, double, or a SpreadsheetUtilities.FormulaError for its value. 
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.Object)">
            <summary>
            Creates a Cell with content
            </summary>
            <param name="content">double, string, or formula content</param>
        </member>
    </members>
</doc>
